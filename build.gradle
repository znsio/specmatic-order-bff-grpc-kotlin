import org.gradle.plugins.ide.eclipse.model.SourceFolder

buildscript {
    ext {
        protobufVersion = '4.28.2'
        protobufPluginVersion = '0.9.4'
        grpcVersion = '1.63.0'
        springBootVersion = '3.3.1'
        springBootGrpcVersion = '3.1.0.RELEASE'
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'idea'
    id 'eclipse'
    id 'java-library'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'com.google.protobuf' version "${protobufPluginVersion}"
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
}

group = 'com.store'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven {
        url uri('lib')
    }
}

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation "net.devh:grpc-spring-boot-starter:${springBootGrpcVersion}"
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'build.buf:protovalidate:0.2.1'

    compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5' // Java 9+ compatibility - Do NOT update to 2.0.0

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.specmatic:specmatic-grpc:0.0.8-TRIAL'
}

sourceSets {
    main {
        proto {
            srcDir  'specmatic-order-contracts/io/specmatic/examples/store/grpc'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

eclipse {
    classpath {
        file.beforeMerged { cp ->
            def generatedGrpcFolder = new SourceFolder('src/generated/main/grpc', null);
            generatedGrpcFolder.entryAttributes['ignore_optional_problems'] = 'true';
            cp.entries.add(generatedGrpcFolder);
            def generatedJavaFolder = new SourceFolder('src/generated/main/java', null);
            generatedJavaFolder.entryAttributes['ignore_optional_problems'] = 'true';
            cp.entries.add(generatedJavaFolder);
        }
    }
}

idea {
    module {
        sourceDirs += file("src/generated/main/java")
        sourceDirs += file("src/generated/main/grpc")
        generatedSourceDirs += file("src/generated/main/java")
        generatedSourceDirs += file("src/generated/main/grpc")
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "-----------------------------------------------------"
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            println "-----------------------------------------------------"
        }
    }
}
